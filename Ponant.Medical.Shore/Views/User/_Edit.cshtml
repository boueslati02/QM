@model Ponant.Medical.Shore.Models.EditUserViewModel
@using Ponant.Medical.Data;

@{
    ViewBag.Title = "Edit a user";
}

<div class="modal fade" id="modalEdit" tabindex="-1" role="dialog" aria-labelledby="modalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">@ViewBag.Title</h4>
            </div>
            <div class="modal-body">
                @using (Ajax.BeginForm("_Edit", "User", new AjaxOptions
                {
                    HttpMethod = "POST",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "frmEdit",
                    OnSuccess = "modalNew(data, 'modalEdit', 'frmEdit')",
                    OnFailure = "modalNew(data, 'modalEdit', 'frmEdit')"
                }, new { @id = "formUserEdit", @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)

                    if (HttpContext.Current.User.IsInRole(Constants.ROLE_NAME_IT_ADMINISTRATOR) || HttpContext.Current.User.IsInRole(Constants.ROLE_NAME_GROUP))
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.IdAgency, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.TextBox("agencyFormUserEdit", Model.AgencyName, new { @class = "form-control", autocomplete = "off" })
                                @Html.HiddenFor(model => model.IdAgency, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.IdAgency, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.AgencyName, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9 displayField">
                                @Html.DisplayFor(model => model.AgencyName, new { @class = "form-control" })
                                @Html.HiddenFor(model => model.AgencyName, new { @class = "form-control" })
                                @Html.HiddenFor(model => model.IdAgency, new { @class = "form-control" })
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBoxFor(model => model.UserName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Enabled, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.CheckBoxFor(model => model.Enabled)
                            @Html.ValidationMessageFor(model => model.Enabled, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    if (ViewBag.Roles != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.Role, ViewBag.Roles as List<SelectListItem>, "All", new { @class = "form-control", @id = "changeValuesUserEdit" })
                                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    if (HttpContext.Current.User.IsInRole(Constants.ROLE_NAME_IT_ADMINISTRATOR) || HttpContext.Current.User.IsInRole(Constants.ROLE_NAME_GROUP))
                    {
                        <div id="divHideLogoUserEdit">
                            <div class="form-group">
                                <div class="control-label col-md-3">
                                    @Html.LabelFor(model => model.LogoName, "Logo")
                                    @(!string.IsNullOrEmpty(Model.LogoName) ? Html.Raw("<br/><span>(" + Model.LogoName + ")</span>") : @Html.Raw(string.Empty))
                                </div>
                                <div class="col-md-7">
                                    @Html.HiddenFor(model => model.LogoName)
                                    @Html.TextBoxFor(model => model.LogoName, new { id = "LogoName_FileData", @class = "fileInput", type = "file", baseUploadUrl = "/User/LogoUpload", accept = ".jpg,.png,.gif", maxFileSize = "1000" })
                                    @Html.ValidationMessageFor(model => model.LogoName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    }

                    if (ViewBag.ShipList != null)
                    {
                        <div id="divHideShipUserEdit">
                            <div class="form-group">
                                @Html.LabelFor(model => model.IdShip, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.IdShip, ViewBag.ShipList as List<SelectListItem>, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.IdShip, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    }

                    <div class="modal-footer">
                        <input type="button" class="btn btn-default" data-dismiss="modal" value="Cancel" />
                        <input type="submit" class="btn btn-primary" value="Save" data-loading-text="Loading..." />
                    </div>
                }
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
@Scripts.Render("~/bundles/user_bundle")