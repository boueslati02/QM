//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :2.0.50727.8745
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Ce code source a été automatiquement généré par xsd, Version=2.0.50727.3038.
// 


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[global::System.Serializable()]
[global::System.ComponentModel.DesignerCategoryAttribute("code")]
[global::System.ComponentModel.ToolboxItem(true)]
[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[global::System.Xml.Serialization.XmlRootAttribute("Booking")]
[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class Booking : global::System.Data.DataSet {
    
    private BookingContextDataTable tableBookingContext;
    
    private AgencyAddressDataTable tableAgencyAddress;
    
    private ParticipantListDataTable tableParticipantList;
    
    private ParticipantDataDataTable tableParticipantData;
    
    private CruiseBookingsDataTable tableCruiseBookings;
    
    private CruiseSailingDataTable tableCruiseSailing;
    
    private ActivityBookingsDataTable tableActivityBookings;
    
    private ActivityBookingDataTable tableActivityBooking;
    
    private global::System.Data.DataRelation relationParticipantList_ParticipantData;
    
    private global::System.Data.DataRelation relationCruiseBookings_CruiseSailing;
    
    private global::System.Data.DataRelation relationCruiseBookings_ActivityBookings;
    
    private global::System.Data.DataRelation relationActivityBookings_ActivityBooking;
    
    private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public Booking() {
        this.BeginInit();
        this.InitClass();
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected Booking(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            if ((ds.Tables["BookingContext"] != null)) {
                base.Tables.Add(new BookingContextDataTable(ds.Tables["BookingContext"]));
            }
            if ((ds.Tables["AgencyAddress"] != null)) {
                base.Tables.Add(new AgencyAddressDataTable(ds.Tables["AgencyAddress"]));
            }
            if ((ds.Tables["ParticipantList"] != null)) {
                base.Tables.Add(new ParticipantListDataTable(ds.Tables["ParticipantList"]));
            }
            if ((ds.Tables["ParticipantData"] != null)) {
                base.Tables.Add(new ParticipantDataDataTable(ds.Tables["ParticipantData"]));
            }
            if ((ds.Tables["CruiseBookings"] != null)) {
                base.Tables.Add(new CruiseBookingsDataTable(ds.Tables["CruiseBookings"]));
            }
            if ((ds.Tables["CruiseSailing"] != null)) {
                base.Tables.Add(new CruiseSailingDataTable(ds.Tables["CruiseSailing"]));
            }
            if ((ds.Tables["ActivityBookings"] != null)) {
                base.Tables.Add(new ActivityBookingsDataTable(ds.Tables["ActivityBookings"]));
            }
            if ((ds.Tables["ActivityBooking"] != null)) {
                base.Tables.Add(new ActivityBookingDataTable(ds.Tables["ActivityBooking"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public BookingContextDataTable BookingContext {
        get {
            return this.tableBookingContext;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public AgencyAddressDataTable AgencyAddress {
        get {
            return this.tableAgencyAddress;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public ParticipantListDataTable ParticipantList {
        get {
            return this.tableParticipantList;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public ParticipantDataDataTable ParticipantData {
        get {
            return this.tableParticipantData;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public CruiseBookingsDataTable CruiseBookings {
        get {
            return this.tableCruiseBookings;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public CruiseSailingDataTable CruiseSailing {
        get {
            return this.tableCruiseSailing;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public ActivityBookingsDataTable ActivityBookings {
        get {
            return this.tableActivityBookings;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public ActivityBookingDataTable ActivityBooking {
        get {
            return this.tableActivityBooking;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.BrowsableAttribute(true)]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override global::System.Data.DataSet Clone() {
        Booking cln = ((Booking)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["BookingContext"] != null)) {
                base.Tables.Add(new BookingContextDataTable(ds.Tables["BookingContext"]));
            }
            if ((ds.Tables["AgencyAddress"] != null)) {
                base.Tables.Add(new AgencyAddressDataTable(ds.Tables["AgencyAddress"]));
            }
            if ((ds.Tables["ParticipantList"] != null)) {
                base.Tables.Add(new ParticipantListDataTable(ds.Tables["ParticipantList"]));
            }
            if ((ds.Tables["ParticipantData"] != null)) {
                base.Tables.Add(new ParticipantDataDataTable(ds.Tables["ParticipantData"]));
            }
            if ((ds.Tables["CruiseBookings"] != null)) {
                base.Tables.Add(new CruiseBookingsDataTable(ds.Tables["CruiseBookings"]));
            }
            if ((ds.Tables["CruiseSailing"] != null)) {
                base.Tables.Add(new CruiseSailingDataTable(ds.Tables["CruiseSailing"]));
            }
            if ((ds.Tables["ActivityBookings"] != null)) {
                base.Tables.Add(new ActivityBookingsDataTable(ds.Tables["ActivityBookings"]));
            }
            if ((ds.Tables["ActivityBooking"] != null)) {
                base.Tables.Add(new ActivityBookingDataTable(ds.Tables["ActivityBooking"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
        this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable) {
        this.tableBookingContext = ((BookingContextDataTable)(base.Tables["BookingContext"]));
        if ((initTable == true)) {
            if ((this.tableBookingContext != null)) {
                this.tableBookingContext.InitVars();
            }
        }
        this.tableAgencyAddress = ((AgencyAddressDataTable)(base.Tables["AgencyAddress"]));
        if ((initTable == true)) {
            if ((this.tableAgencyAddress != null)) {
                this.tableAgencyAddress.InitVars();
            }
        }
        this.tableParticipantList = ((ParticipantListDataTable)(base.Tables["ParticipantList"]));
        if ((initTable == true)) {
            if ((this.tableParticipantList != null)) {
                this.tableParticipantList.InitVars();
            }
        }
        this.tableParticipantData = ((ParticipantDataDataTable)(base.Tables["ParticipantData"]));
        if ((initTable == true)) {
            if ((this.tableParticipantData != null)) {
                this.tableParticipantData.InitVars();
            }
        }
        this.tableCruiseBookings = ((CruiseBookingsDataTable)(base.Tables["CruiseBookings"]));
        if ((initTable == true)) {
            if ((this.tableCruiseBookings != null)) {
                this.tableCruiseBookings.InitVars();
            }
        }
        this.tableCruiseSailing = ((CruiseSailingDataTable)(base.Tables["CruiseSailing"]));
        if ((initTable == true)) {
            if ((this.tableCruiseSailing != null)) {
                this.tableCruiseSailing.InitVars();
            }
        }
        this.tableActivityBookings = ((ActivityBookingsDataTable)(base.Tables["ActivityBookings"]));
        if ((initTable == true)) {
            if ((this.tableActivityBookings != null)) {
                this.tableActivityBookings.InitVars();
            }
        }
        this.tableActivityBooking = ((ActivityBookingDataTable)(base.Tables["ActivityBooking"]));
        if ((initTable == true)) {
            if ((this.tableActivityBooking != null)) {
                this.tableActivityBooking.InitVars();
            }
        }
        this.relationParticipantList_ParticipantData = this.Relations["ParticipantList_ParticipantData"];
        this.relationCruiseBookings_CruiseSailing = this.Relations["CruiseBookings_CruiseSailing"];
        this.relationCruiseBookings_ActivityBookings = this.Relations["CruiseBookings_ActivityBookings"];
        this.relationActivityBookings_ActivityBooking = this.Relations["ActivityBookings_ActivityBooking"];
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass() {
        this.DataSetName = "Booking";
        this.Prefix = "";
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableBookingContext = new BookingContextDataTable();
        base.Tables.Add(this.tableBookingContext);
        this.tableAgencyAddress = new AgencyAddressDataTable();
        base.Tables.Add(this.tableAgencyAddress);
        this.tableParticipantList = new ParticipantListDataTable();
        base.Tables.Add(this.tableParticipantList);
        this.tableParticipantData = new ParticipantDataDataTable();
        base.Tables.Add(this.tableParticipantData);
        this.tableCruiseBookings = new CruiseBookingsDataTable();
        base.Tables.Add(this.tableCruiseBookings);
        this.tableCruiseSailing = new CruiseSailingDataTable();
        base.Tables.Add(this.tableCruiseSailing);
        this.tableActivityBookings = new ActivityBookingsDataTable();
        base.Tables.Add(this.tableActivityBookings);
        this.tableActivityBooking = new ActivityBookingDataTable();
        base.Tables.Add(this.tableActivityBooking);
        global::System.Data.ForeignKeyConstraint fkc;
        fkc = new global::System.Data.ForeignKeyConstraint("ParticipantList_ParticipantData", new global::System.Data.DataColumn[] {
                    this.tableParticipantList.ParticipantList_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableParticipantData.ParticipantList_IdColumn});
        this.tableParticipantData.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("CruiseBookings_CruiseSailing", new global::System.Data.DataColumn[] {
                    this.tableCruiseBookings.CruiseBookings_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableCruiseSailing.CruiseBookings_IdColumn});
        this.tableCruiseSailing.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("CruiseBookings_ActivityBookings", new global::System.Data.DataColumn[] {
                    this.tableCruiseBookings.CruiseBookings_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableActivityBookings.CruiseBookings_IdColumn});
        this.tableActivityBookings.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("ActivityBookings_ActivityBooking", new global::System.Data.DataColumn[] {
                    this.tableActivityBookings.ActivityBookings_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableActivityBooking.ActivityBookings_IdColumn});
        this.tableActivityBooking.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        this.relationParticipantList_ParticipantData = new global::System.Data.DataRelation("ParticipantList_ParticipantData", new global::System.Data.DataColumn[] {
                    this.tableParticipantList.ParticipantList_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableParticipantData.ParticipantList_IdColumn}, false);
        this.relationParticipantList_ParticipantData.Nested = true;
        this.Relations.Add(this.relationParticipantList_ParticipantData);
        this.relationCruiseBookings_CruiseSailing = new global::System.Data.DataRelation("CruiseBookings_CruiseSailing", new global::System.Data.DataColumn[] {
                    this.tableCruiseBookings.CruiseBookings_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableCruiseSailing.CruiseBookings_IdColumn}, false);
        this.relationCruiseBookings_CruiseSailing.Nested = true;
        this.Relations.Add(this.relationCruiseBookings_CruiseSailing);
        this.relationCruiseBookings_ActivityBookings = new global::System.Data.DataRelation("CruiseBookings_ActivityBookings", new global::System.Data.DataColumn[] {
                    this.tableCruiseBookings.CruiseBookings_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableActivityBookings.CruiseBookings_IdColumn}, false);
        this.relationCruiseBookings_ActivityBookings.Nested = true;
        this.Relations.Add(this.relationCruiseBookings_ActivityBookings);
        this.relationActivityBookings_ActivityBooking = new global::System.Data.DataRelation("ActivityBookings_ActivityBooking", new global::System.Data.DataColumn[] {
                    this.tableActivityBookings.ActivityBookings_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableActivityBooking.ActivityBookings_IdColumn}, false);
        this.relationActivityBookings_ActivityBooking.Nested = true;
        this.Relations.Add(this.relationActivityBookings_ActivityBooking);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeBookingContext() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeAgencyAddress() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeParticipantList() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeParticipantData() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeCruiseBookings() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeCruiseSailing() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeActivityBookings() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeActivityBooking() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
        Booking ds = new Booking();
        global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
        global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
        global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace)) {
            global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
            global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
            try {
                global::System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                    schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length)) {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                            ;
                        }
                        if ((s1.Position == s1.Length)) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if ((s1 != null)) {
                    s1.Close();
                }
                if ((s2 != null)) {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }
    
    public delegate void BookingContextRowChangeEventHandler(object sender, BookingContextRowChangeEvent e);
    
    public delegate void AgencyAddressRowChangeEventHandler(object sender, AgencyAddressRowChangeEvent e);
    
    public delegate void ParticipantListRowChangeEventHandler(object sender, ParticipantListRowChangeEvent e);
    
    public delegate void ParticipantDataRowChangeEventHandler(object sender, ParticipantDataRowChangeEvent e);
    
    public delegate void CruiseBookingsRowChangeEventHandler(object sender, CruiseBookingsRowChangeEvent e);
    
    public delegate void CruiseSailingRowChangeEventHandler(object sender, CruiseSailingRowChangeEvent e);
    
    public delegate void ActivityBookingsRowChangeEventHandler(object sender, ActivityBookingsRowChangeEvent e);
    
    public delegate void ActivityBookingRowChangeEventHandler(object sender, ActivityBookingRowChangeEvent e);
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class BookingContextDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnLanguageCode;
        
        private global::System.Data.DataColumn columnBookingStatusCode;
        
        private global::System.Data.DataColumn columnOfficeName;
        
        private global::System.Data.DataColumn columnIsGroup;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BookingContextDataTable() {
            this.TableName = "BookingContext";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal BookingContextDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BookingContextDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn LanguageCodeColumn {
            get {
                return this.columnLanguageCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn BookingStatusCodeColumn {
            get {
                return this.columnBookingStatusCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn OfficeNameColumn {
            get {
                return this.columnOfficeName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn IsGroupColumn {
            get {
                return this.columnIsGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BookingContextRow this[int index] {
            get {
                return ((BookingContextRow)(this.Rows[index]));
            }
        }
        
        public event BookingContextRowChangeEventHandler BookingContextRowChanging;
        
        public event BookingContextRowChangeEventHandler BookingContextRowChanged;
        
        public event BookingContextRowChangeEventHandler BookingContextRowDeleting;
        
        public event BookingContextRowChangeEventHandler BookingContextRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddBookingContextRow(BookingContextRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BookingContextRow AddBookingContextRow(string LanguageCode, string BookingStatusCode, string OfficeName, bool IsGroup) {
            BookingContextRow rowBookingContextRow = ((BookingContextRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    LanguageCode,
                    BookingStatusCode,
                    OfficeName,
                    IsGroup};
            rowBookingContextRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowBookingContextRow);
            return rowBookingContextRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            BookingContextDataTable cln = ((BookingContextDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new BookingContextDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnLanguageCode = base.Columns["LanguageCode"];
            this.columnBookingStatusCode = base.Columns["BookingStatusCode"];
            this.columnOfficeName = base.Columns["OfficeName"];
            this.columnIsGroup = base.Columns["IsGroup"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnLanguageCode = new global::System.Data.DataColumn("LanguageCode", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnLanguageCode);
            this.columnBookingStatusCode = new global::System.Data.DataColumn("BookingStatusCode", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnBookingStatusCode);
            this.columnOfficeName = new global::System.Data.DataColumn("OfficeName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnOfficeName);
            this.columnIsGroup = new global::System.Data.DataColumn("IsGroup", typeof(bool), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnIsGroup);
            this.columnLanguageCode.AllowDBNull = false;
            this.columnBookingStatusCode.AllowDBNull = false;
            this.columnOfficeName.AllowDBNull = false;
            this.columnIsGroup.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BookingContextRow NewBookingContextRow() {
            return ((BookingContextRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new BookingContextRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(BookingContextRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.BookingContextRowChanged != null)) {
                this.BookingContextRowChanged(this, new BookingContextRowChangeEvent(((BookingContextRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.BookingContextRowChanging != null)) {
                this.BookingContextRowChanging(this, new BookingContextRowChangeEvent(((BookingContextRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.BookingContextRowDeleted != null)) {
                this.BookingContextRowDeleted(this, new BookingContextRowChangeEvent(((BookingContextRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.BookingContextRowDeleting != null)) {
                this.BookingContextRowDeleting(this, new BookingContextRowChangeEvent(((BookingContextRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveBookingContextRow(BookingContextRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            Booking ds = new Booking();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "BookingContextDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class AgencyAddressDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnAgencyName;
        
        private global::System.Data.DataColumn columnEmail;
        
        private global::System.Data.DataColumn columnLastName;
        
        private global::System.Data.DataColumn columnFirstName;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AgencyAddressDataTable() {
            this.TableName = "AgencyAddress";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal AgencyAddressDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AgencyAddressDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn AgencyNameColumn {
            get {
                return this.columnAgencyName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn EmailColumn {
            get {
                return this.columnEmail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn LastNameColumn {
            get {
                return this.columnLastName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn FirstNameColumn {
            get {
                return this.columnFirstName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AgencyAddressRow this[int index] {
            get {
                return ((AgencyAddressRow)(this.Rows[index]));
            }
        }
        
        public event AgencyAddressRowChangeEventHandler AgencyAddressRowChanging;
        
        public event AgencyAddressRowChangeEventHandler AgencyAddressRowChanged;
        
        public event AgencyAddressRowChangeEventHandler AgencyAddressRowDeleting;
        
        public event AgencyAddressRowChangeEventHandler AgencyAddressRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddAgencyAddressRow(AgencyAddressRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AgencyAddressRow AddAgencyAddressRow(string AgencyName, string Email, string LastName, string FirstName) {
            AgencyAddressRow rowAgencyAddressRow = ((AgencyAddressRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    AgencyName,
                    Email,
                    LastName,
                    FirstName};
            rowAgencyAddressRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowAgencyAddressRow);
            return rowAgencyAddressRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            AgencyAddressDataTable cln = ((AgencyAddressDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new AgencyAddressDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnAgencyName = base.Columns["AgencyName"];
            this.columnEmail = base.Columns["Email"];
            this.columnLastName = base.Columns["LastName"];
            this.columnFirstName = base.Columns["FirstName"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnAgencyName = new global::System.Data.DataColumn("AgencyName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnAgencyName);
            this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnEmail);
            this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnLastName);
            this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnFirstName);
            this.columnAgencyName.AllowDBNull = false;
            this.columnEmail.AllowDBNull = false;
            this.columnLastName.AllowDBNull = false;
            this.columnFirstName.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AgencyAddressRow NewAgencyAddressRow() {
            return ((AgencyAddressRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new AgencyAddressRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(AgencyAddressRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.AgencyAddressRowChanged != null)) {
                this.AgencyAddressRowChanged(this, new AgencyAddressRowChangeEvent(((AgencyAddressRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.AgencyAddressRowChanging != null)) {
                this.AgencyAddressRowChanging(this, new AgencyAddressRowChangeEvent(((AgencyAddressRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.AgencyAddressRowDeleted != null)) {
                this.AgencyAddressRowDeleted(this, new AgencyAddressRowChangeEvent(((AgencyAddressRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.AgencyAddressRowDeleting != null)) {
                this.AgencyAddressRowDeleting(this, new AgencyAddressRowChangeEvent(((AgencyAddressRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveAgencyAddressRow(AgencyAddressRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            Booking ds = new Booking();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "AgencyAddressDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class ParticipantListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnParticipantList_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantListDataTable() {
            this.TableName = "ParticipantList";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ParticipantListDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ParticipantListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ParticipantList_IdColumn {
            get {
                return this.columnParticipantList_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantListRow this[int index] {
            get {
                return ((ParticipantListRow)(this.Rows[index]));
            }
        }
        
        public event ParticipantListRowChangeEventHandler ParticipantListRowChanging;
        
        public event ParticipantListRowChangeEventHandler ParticipantListRowChanged;
        
        public event ParticipantListRowChangeEventHandler ParticipantListRowDeleting;
        
        public event ParticipantListRowChangeEventHandler ParticipantListRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddParticipantListRow(ParticipantListRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantListRow AddParticipantListRow() {
            ParticipantListRow rowParticipantListRow = ((ParticipantListRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null};
            rowParticipantListRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowParticipantListRow);
            return rowParticipantListRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            ParticipantListDataTable cln = ((ParticipantListDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new ParticipantListDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnParticipantList_Id = base.Columns["ParticipantList_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnParticipantList_Id = new global::System.Data.DataColumn("ParticipantList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnParticipantList_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnParticipantList_Id}, true));
            this.columnParticipantList_Id.AutoIncrement = true;
            this.columnParticipantList_Id.AllowDBNull = false;
            this.columnParticipantList_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantListRow NewParticipantListRow() {
            return ((ParticipantListRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new ParticipantListRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(ParticipantListRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.ParticipantListRowChanged != null)) {
                this.ParticipantListRowChanged(this, new ParticipantListRowChangeEvent(((ParticipantListRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.ParticipantListRowChanging != null)) {
                this.ParticipantListRowChanging(this, new ParticipantListRowChangeEvent(((ParticipantListRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.ParticipantListRowDeleted != null)) {
                this.ParticipantListRowDeleted(this, new ParticipantListRowChangeEvent(((ParticipantListRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.ParticipantListRowDeleting != null)) {
                this.ParticipantListRowDeleting(this, new ParticipantListRowChangeEvent(((ParticipantListRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveParticipantListRow(ParticipantListRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            Booking ds = new Booking();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "ParticipantListDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class ParticipantDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnLastName;
        
        private global::System.Data.DataColumn columnFirstName;
        
        private global::System.Data.DataColumn columnCivility;
        
        private global::System.Data.DataColumn columnEmail;
        
        private global::System.Data.DataColumn columnDateOfBirth;
        
        private global::System.Data.DataColumn columnParticipantList_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantDataDataTable() {
            this.TableName = "ParticipantData";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ParticipantDataDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ParticipantDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn LastNameColumn {
            get {
                return this.columnLastName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn FirstNameColumn {
            get {
                return this.columnFirstName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CivilityColumn {
            get {
                return this.columnCivility;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn EmailColumn {
            get {
                return this.columnEmail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DateOfBirthColumn {
            get {
                return this.columnDateOfBirth;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ParticipantList_IdColumn {
            get {
                return this.columnParticipantList_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantDataRow this[int index] {
            get {
                return ((ParticipantDataRow)(this.Rows[index]));
            }
        }
        
        public event ParticipantDataRowChangeEventHandler ParticipantDataRowChanging;
        
        public event ParticipantDataRowChangeEventHandler ParticipantDataRowChanged;
        
        public event ParticipantDataRowChangeEventHandler ParticipantDataRowDeleting;
        
        public event ParticipantDataRowChangeEventHandler ParticipantDataRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddParticipantDataRow(ParticipantDataRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantDataRow AddParticipantDataRow(string LastName, string FirstName, string Civility, string Email, System.DateTime DateOfBirth, ParticipantListRow parentParticipantListRowByParticipantList_ParticipantData) {
            ParticipantDataRow rowParticipantDataRow = ((ParticipantDataRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    LastName,
                    FirstName,
                    Civility,
                    Email,
                    DateOfBirth,
                    null};
            if ((parentParticipantListRowByParticipantList_ParticipantData != null)) {
                columnValuesArray[5] = parentParticipantListRowByParticipantList_ParticipantData[0];
            }
            rowParticipantDataRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowParticipantDataRow);
            return rowParticipantDataRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            ParticipantDataDataTable cln = ((ParticipantDataDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new ParticipantDataDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnLastName = base.Columns["LastName"];
            this.columnFirstName = base.Columns["FirstName"];
            this.columnCivility = base.Columns["Civility"];
            this.columnEmail = base.Columns["Email"];
            this.columnDateOfBirth = base.Columns["DateOfBirth"];
            this.columnParticipantList_Id = base.Columns["ParticipantList_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnLastName);
            this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnFirstName);
            this.columnCivility = new global::System.Data.DataColumn("Civility", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnCivility);
            this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnEmail);
            this.columnDateOfBirth = new global::System.Data.DataColumn("DateOfBirth", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDateOfBirth);
            this.columnParticipantList_Id = new global::System.Data.DataColumn("ParticipantList_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnParticipantList_Id);
            this.columnLastName.AllowDBNull = false;
            this.columnFirstName.AllowDBNull = false;
            this.columnCivility.AllowDBNull = false;
            this.columnDateOfBirth.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantDataRow NewParticipantDataRow() {
            return ((ParticipantDataRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new ParticipantDataRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(ParticipantDataRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.ParticipantDataRowChanged != null)) {
                this.ParticipantDataRowChanged(this, new ParticipantDataRowChangeEvent(((ParticipantDataRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.ParticipantDataRowChanging != null)) {
                this.ParticipantDataRowChanging(this, new ParticipantDataRowChangeEvent(((ParticipantDataRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.ParticipantDataRowDeleted != null)) {
                this.ParticipantDataRowDeleted(this, new ParticipantDataRowChangeEvent(((ParticipantDataRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.ParticipantDataRowDeleting != null)) {
                this.ParticipantDataRowDeleting(this, new ParticipantDataRowChangeEvent(((ParticipantDataRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveParticipantDataRow(ParticipantDataRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            Booking ds = new Booking();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "ParticipantDataDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class CruiseBookingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnCruiseBookings_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseBookingsDataTable() {
            this.TableName = "CruiseBookings";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal CruiseBookingsDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CruiseBookingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CruiseBookings_IdColumn {
            get {
                return this.columnCruiseBookings_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseBookingsRow this[int index] {
            get {
                return ((CruiseBookingsRow)(this.Rows[index]));
            }
        }
        
        public event CruiseBookingsRowChangeEventHandler CruiseBookingsRowChanging;
        
        public event CruiseBookingsRowChangeEventHandler CruiseBookingsRowChanged;
        
        public event CruiseBookingsRowChangeEventHandler CruiseBookingsRowDeleting;
        
        public event CruiseBookingsRowChangeEventHandler CruiseBookingsRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddCruiseBookingsRow(CruiseBookingsRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseBookingsRow AddCruiseBookingsRow() {
            CruiseBookingsRow rowCruiseBookingsRow = ((CruiseBookingsRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null};
            rowCruiseBookingsRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowCruiseBookingsRow);
            return rowCruiseBookingsRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            CruiseBookingsDataTable cln = ((CruiseBookingsDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new CruiseBookingsDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnCruiseBookings_Id = base.Columns["CruiseBookings_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnCruiseBookings_Id = new global::System.Data.DataColumn("CruiseBookings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnCruiseBookings_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnCruiseBookings_Id}, true));
            this.columnCruiseBookings_Id.AutoIncrement = true;
            this.columnCruiseBookings_Id.AllowDBNull = false;
            this.columnCruiseBookings_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseBookingsRow NewCruiseBookingsRow() {
            return ((CruiseBookingsRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new CruiseBookingsRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(CruiseBookingsRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.CruiseBookingsRowChanged != null)) {
                this.CruiseBookingsRowChanged(this, new CruiseBookingsRowChangeEvent(((CruiseBookingsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.CruiseBookingsRowChanging != null)) {
                this.CruiseBookingsRowChanging(this, new CruiseBookingsRowChangeEvent(((CruiseBookingsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.CruiseBookingsRowDeleted != null)) {
                this.CruiseBookingsRowDeleted(this, new CruiseBookingsRowChangeEvent(((CruiseBookingsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.CruiseBookingsRowDeleting != null)) {
                this.CruiseBookingsRowDeleting(this, new CruiseBookingsRowChangeEvent(((CruiseBookingsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveCruiseBookingsRow(CruiseBookingsRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            Booking ds = new Booking();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "CruiseBookingsDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class CruiseSailingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnCruiseID;
        
        private global::System.Data.DataColumn columnShipCode;
        
        private global::System.Data.DataColumn columnShipName;
        
        private global::System.Data.DataColumn columnDestinationCode;
        
        private global::System.Data.DataColumn columnDestinationName;
        
        private global::System.Data.DataColumn columnSailingDate;
        
        private global::System.Data.DataColumn columnSailingLengthDays;
        
        private global::System.Data.DataColumn columnCabinNo;
        
        private global::System.Data.DataColumn columnCruiseBookings_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseSailingDataTable() {
            this.TableName = "CruiseSailing";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal CruiseSailingDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CruiseSailingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CruiseIDColumn {
            get {
                return this.columnCruiseID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ShipCodeColumn {
            get {
                return this.columnShipCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ShipNameColumn {
            get {
                return this.columnShipName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DestinationCodeColumn {
            get {
                return this.columnDestinationCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DestinationNameColumn {
            get {
                return this.columnDestinationName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn SailingDateColumn {
            get {
                return this.columnSailingDate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn SailingLengthDaysColumn {
            get {
                return this.columnSailingLengthDays;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CabinNoColumn {
            get {
                return this.columnCabinNo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CruiseBookings_IdColumn {
            get {
                return this.columnCruiseBookings_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseSailingRow this[int index] {
            get {
                return ((CruiseSailingRow)(this.Rows[index]));
            }
        }
        
        public event CruiseSailingRowChangeEventHandler CruiseSailingRowChanging;
        
        public event CruiseSailingRowChangeEventHandler CruiseSailingRowChanged;
        
        public event CruiseSailingRowChangeEventHandler CruiseSailingRowDeleting;
        
        public event CruiseSailingRowChangeEventHandler CruiseSailingRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddCruiseSailingRow(CruiseSailingRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseSailingRow AddCruiseSailingRow(string CruiseID, string ShipCode, string ShipName, string DestinationCode, string DestinationName, System.DateTime SailingDate, int SailingLengthDays, int CabinNo, CruiseBookingsRow parentCruiseBookingsRowByCruiseBookings_CruiseSailing) {
            CruiseSailingRow rowCruiseSailingRow = ((CruiseSailingRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    CruiseID,
                    ShipCode,
                    ShipName,
                    DestinationCode,
                    DestinationName,
                    SailingDate,
                    SailingLengthDays,
                    CabinNo,
                    null};
            if ((parentCruiseBookingsRowByCruiseBookings_CruiseSailing != null)) {
                columnValuesArray[8] = parentCruiseBookingsRowByCruiseBookings_CruiseSailing[0];
            }
            rowCruiseSailingRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowCruiseSailingRow);
            return rowCruiseSailingRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            CruiseSailingDataTable cln = ((CruiseSailingDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new CruiseSailingDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnCruiseID = base.Columns["CruiseID"];
            this.columnShipCode = base.Columns["ShipCode"];
            this.columnShipName = base.Columns["ShipName"];
            this.columnDestinationCode = base.Columns["DestinationCode"];
            this.columnDestinationName = base.Columns["DestinationName"];
            this.columnSailingDate = base.Columns["SailingDate"];
            this.columnSailingLengthDays = base.Columns["SailingLengthDays"];
            this.columnCabinNo = base.Columns["CabinNo"];
            this.columnCruiseBookings_Id = base.Columns["CruiseBookings_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnCruiseID = new global::System.Data.DataColumn("CruiseID", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnCruiseID);
            this.columnShipCode = new global::System.Data.DataColumn("ShipCode", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnShipCode);
            this.columnShipName = new global::System.Data.DataColumn("ShipName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnShipName);
            this.columnDestinationCode = new global::System.Data.DataColumn("DestinationCode", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDestinationCode);
            this.columnDestinationName = new global::System.Data.DataColumn("DestinationName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDestinationName);
            this.columnSailingDate = new global::System.Data.DataColumn("SailingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnSailingDate);
            this.columnSailingLengthDays = new global::System.Data.DataColumn("SailingLengthDays", typeof(int), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnSailingLengthDays);
            this.columnCabinNo = new global::System.Data.DataColumn("CabinNo", typeof(int), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnCabinNo);
            this.columnCruiseBookings_Id = new global::System.Data.DataColumn("CruiseBookings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnCruiseBookings_Id);
            this.columnCruiseID.AllowDBNull = false;
            this.columnShipCode.AllowDBNull = false;
            this.columnShipName.AllowDBNull = false;
            this.columnDestinationCode.AllowDBNull = false;
            this.columnDestinationName.AllowDBNull = false;
            this.columnSailingDate.AllowDBNull = false;
            this.columnSailingLengthDays.AllowDBNull = false;
            this.columnCabinNo.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseSailingRow NewCruiseSailingRow() {
            return ((CruiseSailingRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new CruiseSailingRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(CruiseSailingRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.CruiseSailingRowChanged != null)) {
                this.CruiseSailingRowChanged(this, new CruiseSailingRowChangeEvent(((CruiseSailingRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.CruiseSailingRowChanging != null)) {
                this.CruiseSailingRowChanging(this, new CruiseSailingRowChangeEvent(((CruiseSailingRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.CruiseSailingRowDeleted != null)) {
                this.CruiseSailingRowDeleted(this, new CruiseSailingRowChangeEvent(((CruiseSailingRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.CruiseSailingRowDeleting != null)) {
                this.CruiseSailingRowDeleting(this, new CruiseSailingRowChangeEvent(((CruiseSailingRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveCruiseSailingRow(CruiseSailingRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            Booking ds = new Booking();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "CruiseSailingDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class ActivityBookingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnActivityBookings_Id;
        
        private global::System.Data.DataColumn columnCruiseBookings_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingsDataTable() {
            this.TableName = "ActivityBookings";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ActivityBookingsDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ActivityBookingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ActivityBookings_IdColumn {
            get {
                return this.columnActivityBookings_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CruiseBookings_IdColumn {
            get {
                return this.columnCruiseBookings_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingsRow this[int index] {
            get {
                return ((ActivityBookingsRow)(this.Rows[index]));
            }
        }
        
        public event ActivityBookingsRowChangeEventHandler ActivityBookingsRowChanging;
        
        public event ActivityBookingsRowChangeEventHandler ActivityBookingsRowChanged;
        
        public event ActivityBookingsRowChangeEventHandler ActivityBookingsRowDeleting;
        
        public event ActivityBookingsRowChangeEventHandler ActivityBookingsRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddActivityBookingsRow(ActivityBookingsRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingsRow AddActivityBookingsRow(CruiseBookingsRow parentCruiseBookingsRowByCruiseBookings_ActivityBookings) {
            ActivityBookingsRow rowActivityBookingsRow = ((ActivityBookingsRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parentCruiseBookingsRowByCruiseBookings_ActivityBookings != null)) {
                columnValuesArray[1] = parentCruiseBookingsRowByCruiseBookings_ActivityBookings[0];
            }
            rowActivityBookingsRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowActivityBookingsRow);
            return rowActivityBookingsRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            ActivityBookingsDataTable cln = ((ActivityBookingsDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new ActivityBookingsDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnActivityBookings_Id = base.Columns["ActivityBookings_Id"];
            this.columnCruiseBookings_Id = base.Columns["CruiseBookings_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnActivityBookings_Id = new global::System.Data.DataColumn("ActivityBookings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnActivityBookings_Id);
            this.columnCruiseBookings_Id = new global::System.Data.DataColumn("CruiseBookings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnCruiseBookings_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnActivityBookings_Id}, true));
            this.columnActivityBookings_Id.AutoIncrement = true;
            this.columnActivityBookings_Id.AllowDBNull = false;
            this.columnActivityBookings_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingsRow NewActivityBookingsRow() {
            return ((ActivityBookingsRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new ActivityBookingsRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(ActivityBookingsRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.ActivityBookingsRowChanged != null)) {
                this.ActivityBookingsRowChanged(this, new ActivityBookingsRowChangeEvent(((ActivityBookingsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.ActivityBookingsRowChanging != null)) {
                this.ActivityBookingsRowChanging(this, new ActivityBookingsRowChangeEvent(((ActivityBookingsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.ActivityBookingsRowDeleted != null)) {
                this.ActivityBookingsRowDeleted(this, new ActivityBookingsRowChangeEvent(((ActivityBookingsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.ActivityBookingsRowDeleting != null)) {
                this.ActivityBookingsRowDeleting(this, new ActivityBookingsRowChangeEvent(((ActivityBookingsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveActivityBookingsRow(ActivityBookingsRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            Booking ds = new Booking();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "ActivityBookingsDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class ActivityBookingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnActivityCode;
        
        private global::System.Data.DataColumn columnActivityBookings_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingDataTable() {
            this.TableName = "ActivityBooking";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ActivityBookingDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ActivityBookingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ActivityCodeColumn {
            get {
                return this.columnActivityCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ActivityBookings_IdColumn {
            get {
                return this.columnActivityBookings_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingRow this[int index] {
            get {
                return ((ActivityBookingRow)(this.Rows[index]));
            }
        }
        
        public event ActivityBookingRowChangeEventHandler ActivityBookingRowChanging;
        
        public event ActivityBookingRowChangeEventHandler ActivityBookingRowChanged;
        
        public event ActivityBookingRowChangeEventHandler ActivityBookingRowDeleting;
        
        public event ActivityBookingRowChangeEventHandler ActivityBookingRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddActivityBookingRow(ActivityBookingRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingRow AddActivityBookingRow(string ActivityCode, ActivityBookingsRow parentActivityBookingsRowByActivityBookings_ActivityBooking) {
            ActivityBookingRow rowActivityBookingRow = ((ActivityBookingRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    ActivityCode,
                    null};
            if ((parentActivityBookingsRowByActivityBookings_ActivityBooking != null)) {
                columnValuesArray[1] = parentActivityBookingsRowByActivityBookings_ActivityBooking[0];
            }
            rowActivityBookingRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowActivityBookingRow);
            return rowActivityBookingRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            ActivityBookingDataTable cln = ((ActivityBookingDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new ActivityBookingDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnActivityCode = base.Columns["ActivityCode"];
            this.columnActivityBookings_Id = base.Columns["ActivityBookings_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnActivityCode = new global::System.Data.DataColumn("ActivityCode", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnActivityCode);
            this.columnActivityBookings_Id = new global::System.Data.DataColumn("ActivityBookings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnActivityBookings_Id);
            this.columnActivityCode.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingRow NewActivityBookingRow() {
            return ((ActivityBookingRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new ActivityBookingRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(ActivityBookingRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.ActivityBookingRowChanged != null)) {
                this.ActivityBookingRowChanged(this, new ActivityBookingRowChangeEvent(((ActivityBookingRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.ActivityBookingRowChanging != null)) {
                this.ActivityBookingRowChanging(this, new ActivityBookingRowChangeEvent(((ActivityBookingRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.ActivityBookingRowDeleted != null)) {
                this.ActivityBookingRowDeleted(this, new ActivityBookingRowChangeEvent(((ActivityBookingRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.ActivityBookingRowDeleting != null)) {
                this.ActivityBookingRowDeleting(this, new ActivityBookingRowChangeEvent(((ActivityBookingRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveActivityBookingRow(ActivityBookingRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            Booking ds = new Booking();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "ActivityBookingDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class BookingContextRow : global::System.Data.DataRow {
        
        private BookingContextDataTable tableBookingContext;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal BookingContextRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableBookingContext = ((BookingContextDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string LanguageCode {
            get {
                return ((string)(this[this.tableBookingContext.LanguageCodeColumn]));
            }
            set {
                this[this.tableBookingContext.LanguageCodeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string BookingStatusCode {
            get {
                return ((string)(this[this.tableBookingContext.BookingStatusCodeColumn]));
            }
            set {
                this[this.tableBookingContext.BookingStatusCodeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string OfficeName {
            get {
                return ((string)(this[this.tableBookingContext.OfficeNameColumn]));
            }
            set {
                this[this.tableBookingContext.OfficeNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsGroup {
            get {
                return ((bool)(this[this.tableBookingContext.IsGroupColumn]));
            }
            set {
                this[this.tableBookingContext.IsGroupColumn] = value;
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class AgencyAddressRow : global::System.Data.DataRow {
        
        private AgencyAddressDataTable tableAgencyAddress;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal AgencyAddressRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableAgencyAddress = ((AgencyAddressDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string AgencyName {
            get {
                return ((string)(this[this.tableAgencyAddress.AgencyNameColumn]));
            }
            set {
                this[this.tableAgencyAddress.AgencyNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Email {
            get {
                return ((string)(this[this.tableAgencyAddress.EmailColumn]));
            }
            set {
                this[this.tableAgencyAddress.EmailColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string LastName {
            get {
                return ((string)(this[this.tableAgencyAddress.LastNameColumn]));
            }
            set {
                this[this.tableAgencyAddress.LastNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string FirstName {
            get {
                return ((string)(this[this.tableAgencyAddress.FirstNameColumn]));
            }
            set {
                this[this.tableAgencyAddress.FirstNameColumn] = value;
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class ParticipantListRow : global::System.Data.DataRow {
        
        private ParticipantListDataTable tableParticipantList;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ParticipantListRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableParticipantList = ((ParticipantListDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ParticipantList_Id {
            get {
                return ((int)(this[this.tableParticipantList.ParticipantList_IdColumn]));
            }
            set {
                this[this.tableParticipantList.ParticipantList_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantDataRow[] GetParticipantDataRows() {
            if ((this.Table.ChildRelations["ParticipantList_ParticipantData"] == null)) {
                return new ParticipantDataRow[0];
            }
            else {
                return ((ParticipantDataRow[])(base.GetChildRows(this.Table.ChildRelations["ParticipantList_ParticipantData"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class ParticipantDataRow : global::System.Data.DataRow {
        
        private ParticipantDataDataTable tableParticipantData;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ParticipantDataRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableParticipantData = ((ParticipantDataDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string LastName {
            get {
                return ((string)(this[this.tableParticipantData.LastNameColumn]));
            }
            set {
                this[this.tableParticipantData.LastNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string FirstName {
            get {
                return ((string)(this[this.tableParticipantData.FirstNameColumn]));
            }
            set {
                this[this.tableParticipantData.FirstNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Civility {
            get {
                return ((string)(this[this.tableParticipantData.CivilityColumn]));
            }
            set {
                this[this.tableParticipantData.CivilityColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Email {
            get {
                try {
                    return ((string)(this[this.tableParticipantData.EmailColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'Email\' dans la table \'ParticipantData\' est DBNull.", e);
                }
            }
            set {
                this[this.tableParticipantData.EmailColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime DateOfBirth {
            get {
                return ((global::System.DateTime)(this[this.tableParticipantData.DateOfBirthColumn]));
            }
            set {
                this[this.tableParticipantData.DateOfBirthColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ParticipantList_Id {
            get {
                try {
                    return ((int)(this[this.tableParticipantData.ParticipantList_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'ParticipantList_Id\' dans la table \'ParticipantData\' es" +
                            "t DBNull.", e);
                }
            }
            set {
                this[this.tableParticipantData.ParticipantList_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantListRow ParticipantListRow {
            get {
                return ((ParticipantListRow)(this.GetParentRow(this.Table.ParentRelations["ParticipantList_ParticipantData"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["ParticipantList_ParticipantData"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsEmailNull() {
            return this.IsNull(this.tableParticipantData.EmailColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetEmailNull() {
            this[this.tableParticipantData.EmailColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsParticipantList_IdNull() {
            return this.IsNull(this.tableParticipantData.ParticipantList_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetParticipantList_IdNull() {
            this[this.tableParticipantData.ParticipantList_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class CruiseBookingsRow : global::System.Data.DataRow {
        
        private CruiseBookingsDataTable tableCruiseBookings;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal CruiseBookingsRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableCruiseBookings = ((CruiseBookingsDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int CruiseBookings_Id {
            get {
                return ((int)(this[this.tableCruiseBookings.CruiseBookings_IdColumn]));
            }
            set {
                this[this.tableCruiseBookings.CruiseBookings_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseSailingRow[] GetCruiseSailingRows() {
            if ((this.Table.ChildRelations["CruiseBookings_CruiseSailing"] == null)) {
                return new CruiseSailingRow[0];
            }
            else {
                return ((CruiseSailingRow[])(base.GetChildRows(this.Table.ChildRelations["CruiseBookings_CruiseSailing"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingsRow[] GetActivityBookingsRows() {
            if ((this.Table.ChildRelations["CruiseBookings_ActivityBookings"] == null)) {
                return new ActivityBookingsRow[0];
            }
            else {
                return ((ActivityBookingsRow[])(base.GetChildRows(this.Table.ChildRelations["CruiseBookings_ActivityBookings"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class CruiseSailingRow : global::System.Data.DataRow {
        
        private CruiseSailingDataTable tableCruiseSailing;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal CruiseSailingRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableCruiseSailing = ((CruiseSailingDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CruiseID {
            get {
                return ((string)(this[this.tableCruiseSailing.CruiseIDColumn]));
            }
            set {
                this[this.tableCruiseSailing.CruiseIDColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ShipCode {
            get {
                return ((string)(this[this.tableCruiseSailing.ShipCodeColumn]));
            }
            set {
                this[this.tableCruiseSailing.ShipCodeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ShipName {
            get {
                return ((string)(this[this.tableCruiseSailing.ShipNameColumn]));
            }
            set {
                this[this.tableCruiseSailing.ShipNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string DestinationCode {
            get {
                return ((string)(this[this.tableCruiseSailing.DestinationCodeColumn]));
            }
            set {
                this[this.tableCruiseSailing.DestinationCodeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string DestinationName {
            get {
                return ((string)(this[this.tableCruiseSailing.DestinationNameColumn]));
            }
            set {
                this[this.tableCruiseSailing.DestinationNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime SailingDate {
            get {
                return ((global::System.DateTime)(this[this.tableCruiseSailing.SailingDateColumn]));
            }
            set {
                this[this.tableCruiseSailing.SailingDateColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int SailingLengthDays {
            get {
                return ((int)(this[this.tableCruiseSailing.SailingLengthDaysColumn]));
            }
            set {
                this[this.tableCruiseSailing.SailingLengthDaysColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int CabinNo {
            get {
                return ((int)(this[this.tableCruiseSailing.CabinNoColumn]));
            }
            set {
                this[this.tableCruiseSailing.CabinNoColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int CruiseBookings_Id {
            get {
                try {
                    return ((int)(this[this.tableCruiseSailing.CruiseBookings_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'CruiseBookings_Id\' dans la table \'CruiseSailing\' est D" +
                            "BNull.", e);
                }
            }
            set {
                this[this.tableCruiseSailing.CruiseBookings_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseBookingsRow CruiseBookingsRow {
            get {
                return ((CruiseBookingsRow)(this.GetParentRow(this.Table.ParentRelations["CruiseBookings_CruiseSailing"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["CruiseBookings_CruiseSailing"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCruiseBookings_IdNull() {
            return this.IsNull(this.tableCruiseSailing.CruiseBookings_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCruiseBookings_IdNull() {
            this[this.tableCruiseSailing.CruiseBookings_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class ActivityBookingsRow : global::System.Data.DataRow {
        
        private ActivityBookingsDataTable tableActivityBookings;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ActivityBookingsRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableActivityBookings = ((ActivityBookingsDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ActivityBookings_Id {
            get {
                return ((int)(this[this.tableActivityBookings.ActivityBookings_IdColumn]));
            }
            set {
                this[this.tableActivityBookings.ActivityBookings_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int CruiseBookings_Id {
            get {
                try {
                    return ((int)(this[this.tableActivityBookings.CruiseBookings_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'CruiseBookings_Id\' dans la table \'ActivityBookings\' es" +
                            "t DBNull.", e);
                }
            }
            set {
                this[this.tableActivityBookings.CruiseBookings_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseBookingsRow CruiseBookingsRow {
            get {
                return ((CruiseBookingsRow)(this.GetParentRow(this.Table.ParentRelations["CruiseBookings_ActivityBookings"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["CruiseBookings_ActivityBookings"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCruiseBookings_IdNull() {
            return this.IsNull(this.tableActivityBookings.CruiseBookings_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCruiseBookings_IdNull() {
            this[this.tableActivityBookings.CruiseBookings_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingRow[] GetActivityBookingRows() {
            if ((this.Table.ChildRelations["ActivityBookings_ActivityBooking"] == null)) {
                return new ActivityBookingRow[0];
            }
            else {
                return ((ActivityBookingRow[])(base.GetChildRows(this.Table.ChildRelations["ActivityBookings_ActivityBooking"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class ActivityBookingRow : global::System.Data.DataRow {
        
        private ActivityBookingDataTable tableActivityBooking;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ActivityBookingRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableActivityBooking = ((ActivityBookingDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ActivityCode {
            get {
                return ((string)(this[this.tableActivityBooking.ActivityCodeColumn]));
            }
            set {
                this[this.tableActivityBooking.ActivityCodeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ActivityBookings_Id {
            get {
                try {
                    return ((int)(this[this.tableActivityBooking.ActivityBookings_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("La valeur pour la colonne \'ActivityBookings_Id\' dans la table \'ActivityBooking\' e" +
                            "st DBNull.", e);
                }
            }
            set {
                this[this.tableActivityBooking.ActivityBookings_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingsRow ActivityBookingsRow {
            get {
                return ((ActivityBookingsRow)(this.GetParentRow(this.Table.ParentRelations["ActivityBookings_ActivityBooking"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["ActivityBookings_ActivityBooking"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsActivityBookings_IdNull() {
            return this.IsNull(this.tableActivityBooking.ActivityBookings_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetActivityBookings_IdNull() {
            this[this.tableActivityBooking.ActivityBookings_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class BookingContextRowChangeEvent : global::System.EventArgs {
        
        private BookingContextRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BookingContextRowChangeEvent(BookingContextRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BookingContextRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AgencyAddressRowChangeEvent : global::System.EventArgs {
        
        private AgencyAddressRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AgencyAddressRowChangeEvent(AgencyAddressRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AgencyAddressRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ParticipantListRowChangeEvent : global::System.EventArgs {
        
        private ParticipantListRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantListRowChangeEvent(ParticipantListRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantListRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ParticipantDataRowChangeEvent : global::System.EventArgs {
        
        private ParticipantDataRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantDataRowChangeEvent(ParticipantDataRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParticipantDataRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class CruiseBookingsRowChangeEvent : global::System.EventArgs {
        
        private CruiseBookingsRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseBookingsRowChangeEvent(CruiseBookingsRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseBookingsRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class CruiseSailingRowChangeEvent : global::System.EventArgs {
        
        private CruiseSailingRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseSailingRowChangeEvent(CruiseSailingRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CruiseSailingRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ActivityBookingsRowChangeEvent : global::System.EventArgs {
        
        private ActivityBookingsRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingsRowChangeEvent(ActivityBookingsRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingsRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ActivityBookingRowChangeEvent : global::System.EventArgs {
        
        private ActivityBookingRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingRowChangeEvent(ActivityBookingRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActivityBookingRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
