@model Ponant.Medical.Shore.Models.CreateCriteriaViewModel

@{
    ViewBag.Title = "Create a criterion";
}

<div class="modal fade" id="modalCreate" tabindex="-1" role="dialog" aria-labelledby="modalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">@ViewBag.Title</h4>
            </div>
            <div class="modal-body">
                @using (Ajax.BeginForm("_Create", "Criteria", new AjaxOptions
                {
                    HttpMethod = "POST",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "frmCreate",
                    //OnSuccess = "modal('modalCreate')",
                    //OnFailure = "modal('modalCreate')",
                    OnSuccess = "modalNew(data, 'modalCreate', 'frmCreate')",
                    OnFailure = "modalNew(data, 'modalCreate', 'frmCreate')"
                }, new { @id = "formCriteriaCreate", @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)

                    <div class="form-group">
                        @Html.LabelFor(model => model.Order, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.Order, new { @class = "form-control numericInput" })
                        </div>
                        <div class="col-md-7">
                            @Html.ValidationMessageFor(model => model.Order, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    if (ViewBag.CruiseTypeList != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.CruiseType, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @if (ViewBag.CruiseTypeList != null)
                                {
                                    @Html.DropDownListFor(model => model.CruiseType, ViewBag.CruiseTypeList as List<SelectListItem>, "", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.CruiseType, "", new { @class = "text-danger" })
                                }
                            </div>
                        </div>
                    }

                    if (ViewBag.DestinationList != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Destinations, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @if (ViewBag.DestinationList != null)
                                {
                                    @Html.ListBoxFor(model => model.Destinations, ViewBag.DestinationList as List<SelectListItem>, new { @class = "listboxMultiSelect" })
                                    @Html.ValidationMessageFor(model => model.Destinations, "", new { @class = "text-danger" })
                                }
                            </div>
                        </div>
                    }


                    if (ViewBag.ShipList != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Ships, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @if (ViewBag.ShipList != null)
                                {
                                    @Html.ListBoxFor(model => model.Ships, ViewBag.ShipList as List<SelectListItem>, new { @class = "listboxMultiSelect" })
                                    @Html.ValidationMessageFor(model => model.Ships, "", new { @class = "text-danger" })
                                }
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.Length, new { @class = "form-control numericInput" })
                        </div>
                        <span class="control-label col-md-1">days</span>
                        <div class="col-md-5">
                            @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Cruise, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBoxFor(model => model.Cruise, new { @class = "form-control col-md-8", placeholder= "Use «;» for separating multiple cruises" })
                            @Html.ValidationMessageFor(model => model.Cruise, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    if (ViewBag.ActivityList != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Activity, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @if (ViewBag.ActivityList != null)
                                {
                                    @Html.TextBoxFor(model => model.Activity, new { @class = "form-control col-md-8", placeholder = "Use «;» for separating multiple activities" })
                                    @Html.ValidationMessageFor(model => model.Activity, "", new { @class = "text-danger" })
                                }
                            </div>
                        </div>
                    }

                    if (ViewBag.SurveyList != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Survey, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @if (ViewBag.SurveyList != null)
                                {
                                    @Html.DropDownListFor(model => model.Survey, ViewBag.SurveyList as List<SelectListItem>, "", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Survey, "", new { @class = "text-danger" })
                                }
                            </div>
                        </div>
                    }

                    <div class="modal-footer">
                        <input type="button" class="btn btn-default" data-dismiss="modal" value="Cancel" />
                        <input type="submit" class="btn btn-primary" value="Save" data-loading-text="Loading..." />
                    </div>
                }
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->