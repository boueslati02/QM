@using Ponant.Medical.Data
@model Ponant.Medical.Shore.Models.EditAdviceViewModel

@{
    ViewBag.Title = "Update advice for ";
}

<div class="modal fade" id="modalEditAdvice" tabindex="-1" role="dialog" aria-labelledby="modalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">@ViewBag.Title @Model.Name</h4>
            </div>
            <div class="modal-body">

                @using (Ajax.BeginForm("_EditAdvice", "Medical", new AjaxOptions
                {
                    HttpMethod = "POST",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "frmEditAdvice",
                    //OnSuccess = "modal('modalEditAdvice')",
                    //OnFailure = "modal('modalEditAdvice')"
                    OnSuccess = "modalNew(data, 'modalEditAdvice', 'frmEditAdvice')",
                    OnFailure = "modalNew(data, 'modalEditAdvice', 'frmEditAdvice')"
                }, new { @id = "formMedicalEdit", @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.IdCruise)
                    @Html.HiddenFor(model => model.Name)

                    if (ViewBag.AdviceList != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.IdAdvice, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.IdAdvice, ViewBag.AdviceList as List<SelectListItem>, "", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.IdAdvice, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }

                    if (ViewBag.DocumentsTypesList != null)
                    {
                        <div id="divDocumentsTypes" class="form-group" adviceValue="@Constants.ADVICE_WAITING_FOR_CLARIFICATION" style="@(@Model.IdAdvice != Constants.ADVICE_WAITING_FOR_CLARIFICATION ? "display:none;" : "")">
                            @Html.LabelFor(model => model.DocumentsTypes, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.ListBoxFor(model => model.DocumentsTypes, ViewBag.DocumentsTypesList as List<SelectListItem>, new { @class = "listboxMultiSelect" })
                                @Html.ValidationMessageFor(model => model.DocumentsTypes, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }

                    if (ViewBag.UnfavorableOpinionList != null)
                    {
                        <div id="divUnfavorableOpinion" class="form-group" adviceValue="@Constants.ADVICE_UNFAVORABLE_OPINION" style="@(@Model.IdAdvice != Constants.ADVICE_UNFAVORABLE_OPINION ? "display:none;" : "")">
                            @Html.LabelFor(model => model.UnfavorableOpinion, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.ListBoxFor(model => model.UnfavorableOpinion, ViewBag.UnfavorableOpinionList as List<SelectListItem>, new { @class = "listboxMultiSelect" })
                                @Html.ValidationMessageFor(model => model.UnfavorableOpinion, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }

                    if (ViewBag.RestrictionsTypesList != null)
                    {
                        <div id="divRestrictionsTypes" class="form-group" adviceValue="@Constants.ADVICE_FAVORABLE_OPINION_WITH_RESTRICTIONS" style="@(@Model.IdAdvice != Constants.ADVICE_FAVORABLE_OPINION_WITH_RESTRICTIONS ? "display:none;" : "")">
                            @Html.LabelFor(model => model.RestrictionsTypes, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.ListBoxFor(model => model.RestrictionsTypes, ViewBag.RestrictionsTypesList as List<SelectListItem>, new { @class = "listboxMultiSelect" })
                                @Html.ValidationMessageFor(model => model.RestrictionsTypes, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }

                    if (ViewBag.RestrictionsPeopleList != null)
                    {
                        <div id="divRestrictionsPeople" class="form-group" adviceValue="@Constants.ADVICE_FAVORABLE_OPINION_WITH_RESTRICTIONS" style="@(@Model.IdAdvice != Constants.ADVICE_FAVORABLE_OPINION_WITH_RESTRICTIONS ? "display:none;" : "")">
                            @Html.LabelFor(model => model.RestrictionsPeople, htmlAttributes: new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.ListBoxFor(model => model.RestrictionsPeople, ViewBag.RestrictionsPeopleList as List<SelectListItem>, new { @class = "listboxMultiSelect" })
                                @Html.ValidationMessageFor(model => model.RestrictionsPeople, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.TextAreaFor(model => model.Comments, new { @class = "form-control", rows = "3" })
                            @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="modal-footer">
                        <input type="button" class="btn btn-default" data-dismiss="modal" value="Cancel" />
                        <input type="submit" class="btn btn-primary" value="Save" data-loading-text="Loading..." />
                    </div>
                }
            </div>

        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

@Scripts.Render("~/bundles/medical_bundle")
@Styles.Render("~/Content/medical_bundle")